"use strict";(self.webpackChunkpathvector_docs=self.webpackChunkpathvector_docs||[]).push([[696],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=u(t),d=a,m=f["".concat(l,".").concat(d)]||f[d]||s[d]||o;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6161:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return s}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={title:"Autoconfiguration",sidebar_position:5},l={unversionedId:"autoconfiguration",id:"autoconfiguration",isDocsHomePage:!1,title:"Autoconfiguration",description:"Pathvector can build certain peer configurations automatically. The match command finds common IXPs for an ASN and outputs a plaintext email body or a Pathvector YAML snippet.",source:"@site/docs/autoconfiguration.md",sourceDirName:".",slug:"/autoconfiguration",permalink:"/docs/autoconfiguration",editUrl:"https://github.com/natesales/pathvector/edit/main/docs/docs/autoconfiguration.md",version:"current",sidebarPosition:5,frontMatter:{title:"Autoconfiguration",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/docs/cli"},next:{title:"Route Optimization",permalink:"/docs/optimizer"}},u=[{value:"YAML Config",id:"yaml-config",children:[]},{value:"Plaintext",id:"plaintext",children:[]},{value:"Arbitrary ASN",id:"arbitrary-asn",children:[]}],p={toc:u};function s(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Pathvector can build certain peer configurations automatically. The ",(0,o.kt)("inlineCode",{parentName:"p"},"match")," command finds common IXPs for an ASN and outputs a plaintext email body or a Pathvector YAML snippet."),(0,o.kt)("h2",{id:"yaml-config"},"YAML Config"),(0,o.kt)("p",null,"Generated YAML output will be indented 2 spaces by default to fit within the YAML ",(0,o.kt)("inlineCode",{parentName:"p"},"peers")," key. Plaintext output is selected by default, add the ",(0,o.kt)("inlineCode",{parentName:"p"},"--generate-config|-g")," flag to select YAML generation mode."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"~ \u25b4 grep ^asn /etc/pathvector.yml\nasn: 34553\n~ \u25b4 pathvector match 13335\n  Cloudflare SIX Seattle:\n    asn: 13335\n    neighbors:\n      - 206.81.81.10\n      - 2001:504:16::3417\n\n  Cloudflare NWAX:\n    asn: 13335\n    neighbors:\n      - 198.32.195.95\n      - 2620:124:2000::95\n\n  Cloudflare KCIX:\n    asn: 13335\n    neighbors:\n      - 206.51.7.34\n      - 2001:504:1b:1::34\n\n  Cloudflare Speed-IX:\n    asn: 13335\n    neighbors:\n      - 185.1.95.191\n      - 2001:7f8:b7::a501:3335:1\n")),(0,o.kt)("h2",{id:"plaintext"},"Plaintext"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"~ \u25b4 grep ^asn /etc/pathvector.yml\nasn: 34553\n~ \u25b4 pathvector match 13335\nSIX Seattle: MTU 1500\n  AS34553\n  206.81.80.97\n  2001:504:16::86f9\n  \n  AS13335\n  206.81.81.10\n  2001:504:16::3417\n\nNWAX: Primary Peering VLAN\n  AS34553\n  198.32.195.28\n  2620:124:2000::28\n  \n  AS13335\n  198.32.195.95\n  2620:124:2000::95\n\nKCIX\n  AS34553\n  206.51.7.39\n  2001:504:1b:1::39\n  \n  AS13335\n  206.51.7.34\n  2001:504:1b:1::34\n\nSpeed-IX: SPEED-IX\n  AS34553\n  185.1.95.166\n  2001:7f8:b7::a503:4553:1\n  \n  AS13335\n  185.1.95.191\n  2001:7f8:b7::a501:3335:1\n")),(0,o.kt)("h2",{id:"arbitrary-asn"},"Arbitrary ASN"),(0,o.kt)("p",null,"The first ASN will be read from the ",(0,o.kt)("inlineCode",{parentName:"p"},"pathvector.yml")," config file by default, but you can supply an alternate ASN with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--local-asn|-l")," flag if you want to find common IXPs for two arbitrary networks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"~ \u25b4 pathvector match -l 44977 34553\nARIX: Primary\n  AS44977\n  44.190.42.2\n  2602:801:30ff::2\n  \n  AS34553\n  44.190.42.3\n  2602:801:30ff::3\n")))}s.isMDXComponent=!0}}]);
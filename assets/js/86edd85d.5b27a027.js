"use strict";(self.webpackChunkpathvector_docs=self.webpackChunkpathvector_docs||[]).push([[925],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(n),u=o,d=f["".concat(l,".").concat(u)]||f[u]||m[u]||r;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2696:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={},l={unversionedId:"integrations/fastnetmon",id:"integrations/fastnetmon",isDocsHomePage:!1,title:"DDoS mitigation with FastNetMon",description:"FastNetMon is a software-based DoS/DDoS detection tool that analyzes flows and signals a mitigation action over BGP such as traffic redirection or selective destination blackholes.",source:"@site/docs/integrations/fastnetmon.md",sourceDirName:"integrations",slug:"/integrations/fastnetmon",permalink:"/docs/integrations/fastnetmon",editUrl:"https://github.com/natesales/pathvector/edit/main/docs/docs/integrations/fastnetmon.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/docs/examples"},next:{title:"Peering Portal",permalink:"/docs/portal"}},c=[{value:"Configure FastNetMon",id:"configure-fastnetmon",children:[]},{value:"Configure Pathvector",id:"configure-pathvector",children:[]}],p={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://fastnetmon.com"},"FastNetMon")," is a software-based DoS/DDoS detection tool that analyzes flows and signals a mitigation action over BGP such as traffic redirection or selective destination blackholes."),(0,r.kt)("p",null,"To get started with Pathvector and FastNetMon, first install ",(0,r.kt)("a",{parentName:"p",href:"/docs/installation"},"Pathvector")," and ",(0,r.kt)("a",{parentName:"p",href:"https://fastnetmon.com/docs-fnm-advanced/advanced-install-guide/"},"FastNetMon Advanced"),"."),(0,r.kt)("h2",{id:"configure-fastnetmon"},"Configure FastNetMon"),(0,r.kt)("p",null,"From the ",(0,r.kt)("inlineCode",{parentName:"p"},"fcli")," prompt:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"set main mirror_afpacket enable\nset main interfaces bond0\nset main process_ipv6_traffic enable\nset main networks_list 198.51.100.0/24\nset main networks_list 2001:db8::/48\n\nset main email_notifications_enabled enable\nset main email_notifications_tls enable\nset main email_notifications_auth enable\nset main email_notifications_port 587\nset main email_notifications_host mail.example.com\nset main email_notifications_from fnm@example.com\nset main email_notifications_username fnm@example.com\nset main email_notifications_password examplepassword\nset main email_notifications_recipients noc@example.com\n\nset hostgroup global threshold_mbps 900\nset hostgroup global ban_for_bandwidth enable\nset hostgroup global threshold_tcp_syn_mbps 10\nset hostgroup global ban_for_tcp_syn_bandwidth enable\nset hostgroup global threshold_icmp_mbps 10\nset hostgroup global ban_for_icmp_bandwidth enable\n\nset hostgroup global enable_ban enable\nset main enable_ban_ipv6 enable\nset main enable_ban enable\nset main unban_enabled enable\nset main ban_time 300  # Unban after 5 minutes\n\nset main gobgp enable\nset main gobgp_ipv6 enable\nset main gobgp_announce_host enable\nset main gobgp_announce_host_ipv6 enable\nset main gobgp_next_hop 192.0.2.1\nset main gobgp_next_hop_ipv6 100::1\nset main gobgp_bgp_listen_port 1179\n\nset bgp pathvector\nset bgp pathvector local_asn 65530\nset bgp pathvector remote_asn 65530\nset bgp pathvector local_address 127.0.0.2\nset bgp pathvector remote_address 127.0.0.1\nset bgp pathvector ipv4_unicast enable\nset bgp pathvector ipv6_unicast enable\nset bgp pathvector active enable\n\ncommit\n")),(0,r.kt)("h2",{id:"configure-pathvector"},"Configure Pathvector"),(0,r.kt)("p",null,"Pathvector config needs a few extra options for the FastNetMon session:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'FastNetMon:\n  asn: 65530\n  local-asn: 65530  # In this example the ASN and local ASN are set explicitly for iBGP\n  listen4: 127.0.0.1\n  neighbors: [ "127.0.0.2" ]\n  filter-rpki: false  # ROAs may have a maxLength that would cause the routes to be filtered\n  filter-prefix-length: false  # Disable prefix length filter so /32 and /128 routes will be accepted\n  enforce-first-as: false  # We don\'t care about the first AS in path\n  enforce-peer-nexthop: false  # Peer nexthops will be set to blackhole addresses, not the BGP peer address\n  announce-originated: false  # No need to announce anything to FNM. While it does support learning routes over BGP, the implementation requires a cronjob to run the updates: https://fastnetmon.com/docs-fnm-advanced/subnet-collection-from-bgp-peering-session/\n  neighbor-port: 1179  # The default BGP port will conflict, so we\'ll use a different one for FastNetMon\n  import-communities: [ "65530,666" ]  # More communities can be added here for other peers, or added on a per-peer basis\n  mp-unicast-46: true  # FastNetMon will announce both IPv4 and IPv6 routes over this multiprotocol session\n')))}m.isMDXComponent=!0}}]);